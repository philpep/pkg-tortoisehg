Description: disable redirect of stdout file descriptor for non-Windows
Origin: http://bitbucket.org/tortoisehg/stable/changeset/61f718a7cca9/
Bug: http://bitbucket.org/tortoisehg/stable/issue/783/
Bug-Ubuntu: https://bugs.edge.launchpad.net/ubuntu/+source/tortoisehg/+bug/519984

# HG changeset patch -- Bitbucket.org
# Project stable
# URL http://bitbucket.org/tortoisehg/stable/overview/
# User Steve Borho <steve@borho.org>
# Date 1266188548 21600
# Node ID 61f718a7cca9ff08d08bf9f7566fbbc4391ea7b4
# Parent e3f0793381ad096cda8507bf2cf44b092e34b32d
hgcmd: disable redirect of stdout file descriptor for non-Windows

Refs #783

Index: tortoisehg/tortoisehg/hgtk/hgcmd.py
===================================================================
--- tortoisehg.orig/tortoisehg/hgtk/hgcmd.py	2010-01-01 18:48:07.000000000 -0800
+++ tortoisehg/tortoisehg/hgtk/hgcmd.py	2010-02-14 17:09:34.000000000 -0800
@@ -123,12 +123,15 @@
                     self.stdoutq.put(o)
                 else:
                     break
-        self.oldstdout = os.dup(sys.__stdout__.fileno())
         self.stdoutq = Queue.Queue()
-        self.readfd, writefd = os.pipe()
-        os.dup2(writefd, sys.__stdout__.fileno())
-        thread = threading.Thread(target=pollstdout, args=[])
-        thread.start()
+        if os.name == 'nt':
+            # Only capture stdout on Windows.  This causes hard crashes
+            # on some other platforms. See issue #783
+            self.readfd, writefd = os.pipe()
+            self.oldstdout = os.dup(sys.__stdout__.fileno())
+            os.dup2(writefd, sys.__stdout__.fileno())
+            thread = threading.Thread(target=pollstdout, args=[])
+            thread.start()
 
         self.hgthread = hgthread.HgThread(self.cmdline[1:])
         self.hgthread.start()
@@ -188,8 +191,9 @@
             self._button_stop.set_sensitive(False)
             self._button_ok.set_sensitive(True)
             self._button_ok.grab_focus()
-            os.dup2(self.oldstdout, sys.__stdout__.fileno())
-            os.close(self.oldstdout)
+            if os.name == 'nt':
+                os.dup2(self.oldstdout, sys.__stdout__.fileno())
+                os.close(self.oldstdout)
             return False # Stop polling this function
         else:
             return True
